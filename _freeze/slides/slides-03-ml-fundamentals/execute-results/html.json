{
  "hash": "8294e5765791a316ff607539500b9968",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'CPSC 330 Lecture 3: ML fundamentals'\nauthor: \"Varada Kolhatkar\"\ndescription: Supervised Machine Learning Fundamentals\ndescription-short: 'generalization, data splitting, cross-validation, overfitting, underfitting, the fundamental tradeoff, the golden rule'\nformat:\n  revealjs:\n    html-math-method: mathjax\n    slide-number: true\n    smaller: true\n    center: true\n    logo: img/UBC-CS-logo.png\n    resources:\n      - data/\n      - img/\n---\n\n\n## Announcements \n\n- Homework 2 (hw2) has been released (Due: Sept 16, 11:59pm)\n  - You are welcome to broadly discuss it with your classmates but final answers and submissions must be your own.\n  - Group submissions are not allowed for this assignment.\n- Advice on keeping up with the material\n  - Practice!\n  - Start early on homework assignments.\n- If you are still on the waitlist, it's your responsibility to keep up with the material and submit assignments.\n- Last day to drop without a W standing: Sept 15 \n\n\n## iClicker 3.1\n\nClicker cloud join link: https://join.iclicker.com/FZMQ\n\n**Select all of the following statements which are TRUE.**\n\n- (A) A decision tree model with no depth (the default `max_depth` in `sklearn`) is likely to perform very well on the deployment data.\n- (B) Data splitting helps us assess how well our model would generalize.\n- (C) Deployment data is scored only once.\n- (D) Validation data could be used for hyperparameter optimization.\n- (E) It’s recommended that data be shuffled before splitting it into train and test sets.\n\n\n## iClicker 3.2\n\nClicker cloud join link: https://join.iclicker.com/FZMQ\n\n**Select all of the following statements which are TRUE.**\n\n- (A) $k$-fold cross-validation calls fit $k$ times\n- (B) We use cross-validation to get a more robust estimate of model performance.\n- (C) If the mean train accuracy is much higher than the mean cross-validation accuracy it's likely to be a case of overfitting.\n- (D) The fundamental tradeoff of ML states that as training error goes down, validation error goes up.\n- (E) A decision stump on a complicated classification problem is likely to underfit.\n\n## Recap from videos \n- Why do we split the data? What are train/valid/test splits? \n- What are the benefits of cross-validation?\n- What is underfitting and overfitting? \n- What’s the fundamental trade-off in supervised machine learning?\n- What is the golden rule of machine learning?\n\n## Summary of train, validation, test, and deployment data \n\n|         | `fit` | `score` | `predict` |\n|----------|-------|---------|-----------|\n| Train    | ✔️      | ✔️      | ✔️         |\n| Validation |      | ✔️      | ✔️         |\n| Test    |       |  once   | once         |\n| Deployment    |       |       | ✔️         |\n\n## Cross validation\n\n![](img/cross-validation.png){fig-align=\"center\"}\n\n## Cross validation\n\n::: {#5fab686f .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n![](slides-03-ml-fundamentals_files/figure-revealjs/cell-2-output-1.png){}\n:::\n:::\n\n\n## Overfitting and underfitting \n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n![](img/underfit-overfit-google-developer.png)\n\n[Source](https://developers.google.com/machine-learning/crash-course/overfitting/overfitting)\n:::\n\n::: {.column width=\"40%\"}\n- An **overfit model** matches the training set so closely that it fails to make correct predictions on new unseen data.  \n- An **underfit model** is too simple and does not even make good predictions on the training data \n\n:::\n::::\n\n## The fundamental tradeoff\n\nAs you increase the model complexity, training score tends to go up and the gap between train and validation scores tends to go up.  \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![](img/malp_0201.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\n- Underfitting: Both accuracies rise\n- Sweet spot: Validation accuracy peaks\n- Overfitting: Training $\\uparrow$, Validation $\\downarrow$\n- Tradeoff: Balance complexity to avoid both\n:::\n\n::::\n\n## The golden rule\n- Although our primary concern is the model's performance on the test data, this data should not influence the training process in any way.\n\n::: {.column width=\"50%\"}\n![](img/golden_rule_analogy.png){fig-align=\"center\"}\n\nSource: Image generated by ChatGPT 5\n:::\n\n::: {.column width=\"50%\"}\n- **Test data = final exam**  \n- You can practice all you want with training/validation data\n- But **never peek** at the test set before evaluation\n- Otherwise, it's like sneaking answers before the exam $\\rightarrow$ **not a real assessment of your learning**.  \n:::\n\n::::\n\n# [Class demo](https://github.com/UBC-CS/cpsc330-2025W1/blob/main/lectures/102-Varada-lectures/class_demos/demo_03-ml-fundamentals.ipynb)\n\n",
    "supporting": [
      "slides-03-ml-fundamentals_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}