{
  "hash": "4f441a79aaa27a9e685cc8eb765f83c6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Lecture 1: Introduction to CPSC 330'\ndescription: Introduction to ML and CPSC 330\n\nformat:\n    revealjs:\n        html-math-method: plain\n        slide-number: true\n        slide-level: 2\n        theme:\n          - slides.scss\n        center: true\n        logo: img/UBC-CS-logo.png\n        resources:\n          - data/\n          - img/\n\n\neditor:\n  render-on-save: true\n---\n\n\n\n## Learning outcomes \nFrom this lecture, you will be able to \n\n- Explain the motivation behind study machine learning. \n- Briefly describe supervised learning.\n- Differentiate between traditional programming and machine learning.\n- Assess whether a given problem is suitable for a machine learning solution.\n- Navigate through the course material. \n- Be familiar with the policies and how the class is going to run.\n\n## QR code of CPSC 330 website\n\\\n\n- Course Jupyter book: https://ubc-cs.github.io/cpsc330-2024W1\n- Course GitHub repository: https://github.com/UBC-CS/cpsc330-2024W1\n\n![](img/CPSC330-QR-code.png){.nostretch fig-align=\"center\" width=\"500px\"}\n\n# ü§ù Introductions ü§ù {.middle}\n\n## Meet your instructor {background=\"#43464B\"}\n\n:::: {.columns}\n\n::: {.column width=\"20%\"}\n<img src=\"img/varada.png\" height=\"150\" width=\"150\">\n:::\n\n::: {.column width=\"80%\"}\n- Varada Kolhatkar [[ ã…ô…æ…ôda k…îÀêl…¶…ô àk…ôr](https://en.wikipedia.org/wiki/International_Phonetic_Alphabet)]\n- You can call me Varada, **V**, or **Ada**.\n- I am an Assistant Professor of Teaching in the Department of Computer Science.\n- I did my Ph.D. in Computational Linguistics at the University of Toronto. \n- I primarily teach machine learning courses in the [Master of Data Science (MDS) program](https://masterdatascience.ubc.ca/). \n- Contact information\n    - Email: kvarada@cs.ubc.ca\n    - Office: ICCS 237\n:::\n\n::::\n\n## Meet Eva (a fictitious persona)!\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n![](img/eva-hi.png)\n:::\n\n::: {.column width=\"60%\"}\nEva is among one of you. She has some experience in Python programming. She knows machine learning as a buzz word. During her recent internship, she has developed some interest and curiosity in the field. She wants to learn what is it and how to use it. She is a curious person and usually has a lot of questions!  \n:::\n\n::::\n\n## You all\n\n- Introduce yourself to your neighbour. \n- Since we're going to spend the semester with each other, I would like to know you a bit better. \n- Please fill out [Getting to know you survey](https://canvas.ubc.ca/courses/149122/quizzes) when you get a chance.\n\n## Asking questions during class\nYou are welcome to ask questions by raising your hand.\nThere is also [a reflection Google Document](https://docs.google.com/document/d/1q9peVKhyoVhrmZ9Afk4LOGlVJA3GXStuVKQWVQDOG2o/edit?usp=sharing) for this course for your questions/comments/reflections. It will be great if you can write about your takeaways, struggle points, and general comments in this document so that I'll try to address those points in the next lecture. \n\n\n## Activity 1: https://shorturl.at/CteOU\n\\\n\n- Write your answers to the questions below in this Google doc: https://shorturl.at/CteOU\n\n* What do you know about machine learning?\n* What would you like to get out this course?\n* Are there any particular topics or aspects of this course that you are especially excited or anxious about? Why?\n\n\n# What is Machine Learning (ML)?\n\n## Spam prediction \n\n- Suppose you are given some data with labeled spam and non-spam messages \n\n::: panel-tabset\n### Code\n\n::: {#f34240ce .cell execution_count=2}\n``` {.python .cell-code}\nsms_df = pd.read_csv(DATA_DIR + \"spam.csv\", encoding=\"latin-1\")\nsms_df = sms_df.drop(columns = [\"Unnamed: 2\", \"Unnamed: 3\", \"Unnamed: 4\"])\nsms_df = sms_df.rename(columns={\"v1\": \"target\", \"v2\": \"sms\"})\ntrain_df, test_df = train_test_split(sms_df, test_size=0.10, random_state=42)\n```\n:::\n\n\n### Output\n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n\n::: {#e1b4a605 .cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>target</th>\n      <th>sms</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>spam</td>\n      <td>LookAtMe!: Thanks for your purchase of a video clip from LookAtMe!, you've been charged 35p. Think you can do better? Why not send a video in a MMSto 32323.</td>\n    </tr>\n    <tr>\n      <td>ham</td>\n      <td>Aight, I'll hit you up when I get some cash</td>\n    </tr>\n    <tr>\n      <td>ham</td>\n      <td>Don no da:)whats you plan?</td>\n    </tr>\n    <tr>\n      <td>ham</td>\n      <td>Going to take your babe out ?</td>\n    </tr>\n    <tr>\n      <td>ham</td>\n      <td>No need lar. Jus testing e phone card. Dunno network not gd i thk. Me waiting 4 my sis 2 finish bathing so i can bathe. Dun disturb u liao u cleaning ur room.</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n:::\n\n:::\n\n## Traditional programming vs. ML\n\n- Imagine writing a Python program for spam identification, i.e., whether a text message or an email is spam or non-spam. \n- Traditional programming \n    - Come up with rules using human understanding of spam messages. \n    - Time consuming and hard to come up with robust set of rules. \n- Machine learning\n    - Collect large amount of data of spam and non-spam emails and let the machine learning algorithm figure out rules. \n\n## Let's train a model \n\n- There are several packages that help us perform machine learning.\n\n::: {#22cc26de .cell execution_count=4}\n``` {.python .cell-code}\nX_train, y_train = train_df[\"sms\"], train_df[\"target\"]\nX_test, y_test = test_df[\"sms\"], test_df[\"target\"]\nclf = make_pipeline(CountVectorizer(max_features=5000), LogisticRegression(max_iter=5000))\nclf.fit(X_train, y_train); # Training the model\n```\n:::\n\n\n## Unseen messages\n\n- Now use the trained model to predict targets of unseen messages:\n\n::: {#5e144ab4 .cell execution_count=5}\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sms</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3245</th>\n      <td>Funny fact Nobody teaches volcanoes 2 erupt, tsunamis 2 arise, hurricanes 2 sway aroundn no 1 teaches hw 2 choose a wife Natural disasters just happens</td>\n    </tr>\n    <tr>\n      <th>944</th>\n      <td>I sent my scores to sophas and i had to do secondary application for a few schools. I think if you are thinking of applying, do a research on cost also. Contact joke ogunrinde, her school is one m...</td>\n    </tr>\n    <tr>\n      <th>1044</th>\n      <td>We know someone who you know that fancies you. Call 09058097218 to find out who. POBox 6, LS15HB 150p</td>\n    </tr>\n    <tr>\n      <th>2484</th>\n      <td>Only if you promise your getting out as SOON as you can. And you'll text me in the morning to let me know you made it in ok.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Predicting on unseen data {.smaller}\n\n**The model is accurately predicting labels for the unseen text messages above!**\n\n::: {#e50fa074 .cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<style type=\"text/css\">\n#T_eff17_row0_col0, #T_eff17_row0_col1, #T_eff17_row1_col0, #T_eff17_row1_col1, #T_eff17_row2_col0, #T_eff17_row2_col1, #T_eff17_row3_col0, #T_eff17_row3_col1 {\n  text-align: left;\n}\n</style>\n<table id=\"T_eff17\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_eff17_level0_col0\" class=\"col_heading level0 col0\" >sms</th>\n      <th id=\"T_eff17_level0_col1\" class=\"col_heading level0 col1\" >spam_predictions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_eff17_level0_row0\" class=\"row_heading level0 row0\" >3245</th>\n      <td id=\"T_eff17_row0_col0\" class=\"data row0 col0\" >Funny fact Nobody teaches volcanoes 2 erupt, tsunamis 2 arise, hurricanes 2 sway aroundn no 1 teaches hw 2 choose a wife Natural disasters just happens</td>\n      <td id=\"T_eff17_row0_col1\" class=\"data row0 col1\" >ham</td>\n    </tr>\n    <tr>\n      <th id=\"T_eff17_level0_row1\" class=\"row_heading level0 row1\" >944</th>\n      <td id=\"T_eff17_row1_col0\" class=\"data row1 col0\" >I sent my scores to sophas and i had to do secondary application for a few schools. I think if you are thinking of applying, do a research on cost also. Contact joke ogunrinde, her school is one me the less expensive ones</td>\n      <td id=\"T_eff17_row1_col1\" class=\"data row1 col1\" >ham</td>\n    </tr>\n    <tr>\n      <th id=\"T_eff17_level0_row2\" class=\"row_heading level0 row2\" >1044</th>\n      <td id=\"T_eff17_row2_col0\" class=\"data row2 col0\" >We know someone who you know that fancies you. Call 09058097218 to find out who. POBox 6, LS15HB 150p</td>\n      <td id=\"T_eff17_row2_col1\" class=\"data row2 col1\" >spam</td>\n    </tr>\n    <tr>\n      <th id=\"T_eff17_level0_row3\" class=\"row_heading level0 row3\" >2484</th>\n      <td id=\"T_eff17_row3_col0\" class=\"data row3 col0\" >Only if you promise your getting out as SOON as you can. And you'll text me in the morning to let me know you made it in ok.</td>\n      <td id=\"T_eff17_row3_col1\" class=\"data row3 col1\" >ham</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## A different way to solve problems \n\nMachine learning uses computer programs to model data. It can be used to extract hidden patterns, make predictions in new situation, or generate novel content.   \n\n<blockquote>\nA field of study that gives computers the ability to learn without being explicitly programmed. <br> -- Arthur Samuel (1959)\n</blockquote>\n\n\n## ML vs. traditional programming\n\n- With machine learning, you're likely to \n    - Save time \n    - Customize and scale products \n\n![](img/traditional-programming-vs-ML.png){.nostretch fig-align=\"center\" width=\"500px\"}\n\n## Prevalence of ML\n\nLet's look at some examples. \n\n<!-- <img src=\"img/ml-examples.png\" height=\"1000\" width=\"1000\">  -->\n![](img/ml-examples.png)\n\n## Activity: For what type of problems ML is appropriate? (~5 mins)\n\nDiscuss with your neighbour for which of the following problems you would use machine learning \n\n- Finding a list of prime numbers up to a limit\n- Given an image, automatically identifying and labeling objects in the image\n- Finding the distance between two nodes in a graph \n\n## Types of machine learning\n\nHere are some typical learning problems. \n\n- **Supervised learning** ([Gmail spam filtering](https://support.google.com/a/answer/2368132?hl=en))\n    - Training a model from input data and its corresponding targets to predict targets for new examples.     \n- Unsupervised learning ([Google News](https://news.google.com/))\n    - Training a model to find patterns in a dataset, typically an unlabeled dataset.\n- Reinforcement learning ([AlphaGo](https://deepmind.com/research/case-studies/alphago-the-story-so-far))\n    - A family of algorithms for finding suitable actions to take in a given situation in order to maximize a reward. \n- Recommendation systems ([Amazon item recommendation system](https://www.cs.umd.edu/~samir/498/Amazon-Recommendations.pdf))\n    - Predict the \"rating\" or \"preference\" a user would give to an item.    \n\n## What is supervised learning? \n\n- Training data comprises a set of observations ($X$) and their corresponding targets ($y$). \n- We wish to find a model function $f$ that relates $X$ to $y$.\n- We use the model function to predict targets of new examples. \n\n![](img/sup-learning.png){.nostretch fig-align=\"center\" width=\"700px\"}\n\n\n## ü§î Eva's questions\n\\\n\nAt this point, Eva is wondering about many questions. \n\n- How are we exactly \"learning\" whether a message is spam and ham? \n- Are we expected to get correct predictions for all possible messages? How does it predict the label for a message it has not seen before?  \n- What if the model mis-labels an unseen example? For instance, what if the model incorrectly predicts a non-spam as a spam? What would be the consequences? \n- How do we measure the success or failure of spam identification? \n- If you want to use this model in the wild, how do you know how reliable it is?  \n- Would it be useful to know how confident the model is about the predictions rather than just a yes or a no?\n\nIt's great to think about these questions right now. But Eva has to be patient. By the end of this course you'll know answers to many of these questions!  \n\n## Predicting labels of a given image \n\n- We can also use machine learning to predict labels of given images using a technique called **transfer learning**. \n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n\n::: {#4819839b .cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![](slides-01-intro_files/figure-revealjs/cell-8-output-1.png){width=578 height=427}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                         Class  Probability score\n                     tiger cat              0.636\n              tabby, tabby cat              0.174\nPembroke, Pembroke Welsh corgi              0.081\n               lynx, catamount              0.011\n--------------------------------------------------------------\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](slides-01-intro_files/figure-revealjs/cell-8-output-3.png){width=354 height=427}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                     Class  Probability score\n         cheetah, chetah, Acinonyx jubatus              0.994\n                  leopard, Panthera pardus              0.005\njaguar, panther, Panthera onca, Felis onca              0.001\n       snow leopard, ounce, Panthera uncia              0.000\n--------------------------------------------------------------\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](slides-01-intro_files/figure-revealjs/cell-8-output-5.png){width=329 height=427}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                   Class  Probability score\n                                 macaque              0.885\npatas, hussar monkey, Erythrocebus patas              0.062\n      proboscis monkey, Nasalis larvatus              0.015\n                       titi, titi monkey              0.010\n--------------------------------------------------------------\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](slides-01-intro_files/figure-revealjs/cell-8-output-7.png){width=315 height=427}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                        Class  Probability score\nWalker hound, Walker foxhound              0.582\n             English foxhound              0.144\n                       beagle              0.068\n                  EntleBucher              0.059\n--------------------------------------------------------------\n```\n:::\n:::\n\n\n:::\n\n## Predicting housing prices\n\nSuppose we want to predict housing prices given a number of attributes associated with houses. The target here is **continuous** and not **discrete**. \n\n::: {#19a2201b .cell execution_count=8}\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>target</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>509000.0</td>\n      <td>2</td>\n      <td>1.50</td>\n      <td>1930</td>\n      <td>3521</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>8</td>\n      <td>1930</td>\n      <td>0</td>\n      <td>1989</td>\n      <td>0</td>\n      <td>98007</td>\n      <td>47.6092</td>\n      <td>-122.146</td>\n      <td>1840</td>\n      <td>3576</td>\n    </tr>\n    <tr>\n      <td>675000.0</td>\n      <td>5</td>\n      <td>2.75</td>\n      <td>2570</td>\n      <td>12906</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>8</td>\n      <td>2570</td>\n      <td>0</td>\n      <td>1987</td>\n      <td>0</td>\n      <td>98075</td>\n      <td>47.5814</td>\n      <td>-122.050</td>\n      <td>2580</td>\n      <td>12927</td>\n    </tr>\n    <tr>\n      <td>420000.0</td>\n      <td>3</td>\n      <td>1.00</td>\n      <td>1150</td>\n      <td>5120</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>6</td>\n      <td>800</td>\n      <td>350</td>\n      <td>1946</td>\n      <td>0</td>\n      <td>98116</td>\n      <td>47.5588</td>\n      <td>-122.392</td>\n      <td>1220</td>\n      <td>5120</td>\n    </tr>\n    <tr>\n      <td>680000.0</td>\n      <td>8</td>\n      <td>2.75</td>\n      <td>2530</td>\n      <td>4800</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>7</td>\n      <td>1390</td>\n      <td>1140</td>\n      <td>1901</td>\n      <td>0</td>\n      <td>98112</td>\n      <td>47.6241</td>\n      <td>-122.305</td>\n      <td>1540</td>\n      <td>4800</td>\n    </tr>\n    <tr>\n      <td>357823.0</td>\n      <td>3</td>\n      <td>1.50</td>\n      <td>1240</td>\n      <td>9196</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>8</td>\n      <td>1240</td>\n      <td>0</td>\n      <td>1968</td>\n      <td>0</td>\n      <td>98072</td>\n      <td>47.7562</td>\n      <td>-122.094</td>\n      <td>1690</td>\n      <td>10800</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## Building a regression model\n\n::: {#aae4d06d .cell execution_count=9}\n``` {.python .cell-code}\nfrom lightgbm.sklearn import LGBMRegressor\n\nX_train, y_train = train_df.drop(columns= [\"target\"]), train_df[\"target\"]\nX_test, y_test = test_df.drop(columns= [\"target\"]), train_df[\"target\"]\n\nmodel = LGBMRegressor()\nmodel.fit(X_train, y_train);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000755 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 2333\n[LightGBM] [Info] Number of data points in the train set: 17290, number of used features: 18\n[LightGBM] [Info] Start training from score 539762.702545\n```\n:::\n:::\n\n\n## Predicting prices of unseen houses\n\n::: {#36e625bb .cell execution_count=10}\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Predicted_target</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>345831.740542</td>\n      <td>4</td>\n      <td>2.25</td>\n      <td>2130</td>\n      <td>8078</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>7</td>\n      <td>1380</td>\n      <td>750</td>\n      <td>1977</td>\n      <td>0</td>\n      <td>98055</td>\n      <td>47.4482</td>\n      <td>-122.209</td>\n      <td>2300</td>\n      <td>8112</td>\n    </tr>\n    <tr>\n      <td>601042.018745</td>\n      <td>3</td>\n      <td>2.50</td>\n      <td>2210</td>\n      <td>7620</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>8</td>\n      <td>2210</td>\n      <td>0</td>\n      <td>1994</td>\n      <td>0</td>\n      <td>98052</td>\n      <td>47.6938</td>\n      <td>-122.130</td>\n      <td>1920</td>\n      <td>7440</td>\n    </tr>\n    <tr>\n      <td>311310.186024</td>\n      <td>4</td>\n      <td>1.50</td>\n      <td>1800</td>\n      <td>9576</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>7</td>\n      <td>1800</td>\n      <td>0</td>\n      <td>1977</td>\n      <td>0</td>\n      <td>98045</td>\n      <td>47.4664</td>\n      <td>-121.747</td>\n      <td>1370</td>\n      <td>9576</td>\n    </tr>\n    <tr>\n      <td>597555.592401</td>\n      <td>3</td>\n      <td>2.50</td>\n      <td>1580</td>\n      <td>1321</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>3</td>\n      <td>8</td>\n      <td>1080</td>\n      <td>500</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>98107</td>\n      <td>47.6688</td>\n      <td>-122.402</td>\n      <td>1530</td>\n      <td>1357</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nWe are predicting continuous values here as apposed to discrete values in `spam` vs. `ham` example. \n\n## Machine learning workflow \n\nSupervised machine learning is quite flexible; it can be used on a variety of problems and different kinds of data. Here is a typical workflow of a supervised machine learning systems.  \n\n![](img/ml-workflow.png){.nostretch fig-align=\"center\" width=\"700px\"}\n\n<!-- <img src=\"img/ml-workflow.png\" height=\"800\" width=\"800\">  -->\n\nWe will build machine learning pipelines in this course, focusing on some of the steps above. \n\n<br><br>\n\n## ‚ùì‚ùì Questions for you\n\niClicker cloud join link: https://join.iclicker.com/VYFJ\n\n### Select all of the following statements which are **True** (iClicker)\n\n- (A) Predicting spam is an example of machine learning. \n- (B) Predicting housing prices is not an example of machine learning. \n- (C) For problems such as spelling correction, translation, face recognition, spam identification, if you are a domain expert, it's usually faster and scalable to come up with a robust set of rules manually rather than building a machine learning model. \n- (D) If you are asked to write a program to find all prime numbers up to  a limit, it is better to implement one of the algorithms for doing so rather than using machine learning. \n- (E) Google News is likely be using machine learning to organize news. \n<br><br><br><br>\n\n## Surveys\n\n- Please complete the \"Getting to know you\" survey on [Canvas]().\n- Also, please complete the anonymous restaurant survey on Qualtrics [here](https://ubc.ca1.qualtrics.com/jfe/form/SV_73VuZiuwM1eDVrw).\n  - We will try to analyze this data set in the coming weeks. \n\n## About this course\n\n::: {.callout-important}\nCourse website: [https://github.com/UBC-CS/cpsc330-2024W1](https://github.com/UBC-CS/cpsc330-2024W1) is the most important link. Please read everything on this GitHub page!\n:::\n\n::: {.callout-important}\nMake sure you go through the syllabus thoroughly and complete the syllabus quiz before Monday, Sept 19th at 11:59pm. \n:::\n\n## CPSC 330 vs. 340\n\nRead [https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/330_vs_340.md]([https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/330_vs_340.md)\nwhich explains the difference between two courses.  \n\n**TLDR:**\n\n- 340: how do ML models work?\n- 330: how do I use ML models?\n- CPSC 340 has many prerequisites. \n- CPSC 340 goes deeper but has a more narrow scope.\n- I think CPSC 330 will be more useful if you just plan to apply basic ML.\n\n## Registration, waitlist and prerequisites\n\n::: {.callout-important}\nPlease go through [this document](https://github.com/UBC-CS/cpsc330-2024W1/blob/master/docs/course_info.md#registration) carefully before contacting your instructors about these issues. Even then, we are very unlikely to be able to help with registration, waitlist or prerequisite issues.\n:::\n\n- If you are on waitlist and if you'd like to try your chances, you should be able to access [Canvas](https://canvas.ubc.ca/courses/149122) and Piazza.  \n- If you're unable to make it this time, there will be two sections of this course offered next semester and then again in the summer.\n\n## Lecture format\n\n- In person lectures T/Th.\n- Sometimes there will be videos to watch before lecture. You will find the list of pre-watch videos in the schedule on the course webpage.\n- We will also try to work on some questions and exercises together during the class. \n- All materials will be posted in this GitHub repository. \n- Weekly tutorials will be **office hour format** run by the TAs and are **completely optional**.\n  - You do not need to be registered in a tutorial.\n  - You can attend whatever tutorials or office hours your want, regardless of in which/whether you're registered.\n\n## Home work assignments\n- First homework assignment is due **this coming Tuesday**, September 10, midnight. This is a relatively straightforward assignment on Python. If you struggle with this assignment then that could be a sign that you will struggle later on in the course.    \n- You must do the first two homework assignments on your own.\n\n## Exams \n\n- We'll have two self-scheduled midterms and one final in Computer-based Testing Facility (CBTF). \n\n## Course calendar\n\nHere is our course Calendar. Make sure you check it on a regular basis: \n\n[https://htmlpreview.github.io/?https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/calendar.html](https://htmlpreview.github.io/?https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/calendar.html)\n\n## Course structure\n\n- Introduction\n  - Week 1 \n- Part I: ML fundamentals, preprocessing, midterm 1\n  - Weeks 2, 3, 4, 5, 6, 7, 8\n- Part II: Unsupervised learning, transfer learning, common special cases, midterm 1\n  - Weeks 8, 9, 10, 11, 12\n- Part III: Communication and ethics\n  - ML skills are not beneficial if you can't use them responsibly and communicate your results. In this module we'll talk about these aspects. \n  - Weeks 13, 14\n\n## Code of conduct\n\n- Our main forum for getting help will be [Piazza](https://piazza.com/ubc.ca/winterterm12024/cpsc_v3301011021032024w1).\n\n::: {.callout-important}\nPlease read [this entire document about asking for help](https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/asking_for_help.md).\n**TLDR:** Be nice.\n:::\n\n\n## Homework format: Jupyter notebooks\n\n- Our notes are created in a [Jupyter notebook](https://jupyter.org/), with file extension `.ipynb`.\n- Also, you will complete your homework assignments using Jupyter notebooks.\n- Confusingly, \"Jupyter notebook\" is also the original application that opens `.ipynb` files - but has since been replaced by **Jupyter lab**.\n  - I am using Jupyter lab, some things might not work with the Jupyter notebook application.\n  - You can also open these files in Visual Studio Code.\n\n## Jupyter notebooks \n\n- Notebooks contain a mix of code, code output, markdown-formatted text (including LaTeX equations), and more.\n- When you open a Jupyter notebook in one of these apps, the document is ‚Äúlive‚Äù, meaning you can run the code.\n\nFor example:\n\n::: {#4ca8dd41 .cell execution_count=11}\n``` {.python .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n2\n```\n:::\n:::\n\n\n::: {#ee108fa1 .cell execution_count=12}\n``` {.python .cell-code}\nx = [1, 2, 3]\nx[0] = 9999\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n[9999, 2, 3]\n```\n:::\n:::\n\n\n## Jupyter \n\n- By default, Jupyter prints out the result of the last line of code, so you don't need as many `print` statements.\n- In addition to the \"live\" notebooks, Jupyter notebooks can be statically rendered in the web browser, e.g. [this](https://github.com/UBC-CS/cpsc330-2024W1/blob/main/lectures/01_intro.ipynb).\n  - This can be convenient for quick read-only access, without needing to launch the Jupyter notebook/lab application.\n  - But you need to launch the app properly to interact with the notebooks.\n\n## Lecture notes\n\n- All the lectures from last year are [available here](https://ubc-cs.github.io/cpsc330-2023W1/README.html).\n- We cannot promise anything will stay the same from last year to this year, so read them in advance at your own risk.\n- A \"finalized\" version will be pushed to [GitHub](https://github.com/UBC-CS/cpsc330-2024W1) and the [Jupyter book](https://ubc-cs.github.io/cpsc330-2024W1/README.html) right before each class.\n- Each instructor will have slightly adapted versions of notes to present slides during lectures.  \n- You will find the link to these slides in our repository: \nhttps://github.com/UBC-CS/cpsc330-2024W1/tree/main/lectures/102-Varada-lectures\n\n## Grades\n\n- The grading breakdown is [here](https://github.com/UBC-CS/cpsc330-2024W1/blob/main/syllabus.md#grading-scheme). \n- The policy on challenging grades is [here](https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/grades.md).\n\n# Setting up your computer for the course \n\n## Recommended browser and tools\n\n- You can install Chrome [here](https://www.google.com/chrome/).\n- You can install Firefox [here](https://www.mozilla.org/en-US/firefox/new/). \n\nIn this course, we will primarily be using `Python` , `git`, `GitHub`, `Canvas`, `Gradescope`, `Piazza`, and `PrairieLearn`. \n\n## Course `conda` environment\n\n- Follow the setup instructions [here](https://ubc-cs.github.io/cpsc330-2024W1/docs/setup.html) to create a course `conda` environment on your computer. \n- If you do not have your computer with you, you can partner up with someone and set up your own computer later.\n\n## Python requirements/resources\n\nWe will primarily use Python in this course.\n\nHere is the basic Python knowledge you'll need for the course: \n\n- Basic Python programming\n- Numpy\n- Pandas\n- Basic matplotlib\n- Sparse matrices\n\nHomework 1 is all about Python.\n\n:::{.callout-note}\nWe do not have time to teach all the Python we need \nbut you can find some useful Python resources [here](https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/resources.md).  \n:::\n\n<br><br>\n\n## Checklist for you before the next class\n\n- [ ] Are you able to access course [Canvas](https://canvas.ubc.ca/courses/149122) shell? \n- [ ] Are you able to access [course Piazza](https://piazza.com/ubc.ca/winterterm12024/cpsc_v3301011021032024w1)?\n- [ ] Are you able to access [Gradescope](https://www.gradescope.ca/courses/18608)? (If not, refer to the [Gradescope Student Guide](https://lthub.ubc.ca/guides/gradescope-student-guide/).)\n- [ ] Are you able to access [iClicker Cloud](https://join.iclicker.com/VYFJ) for this course?\n- [ ] Did you follow the setup instructions [here](https://ubc-cs.github.io/cpsc330-2024W1/docs/setup.html) to create a course conda environment on your computer?\n- [ ] Did you complete the \"Getting to know you\" survey on Canvas?\n- [ ] Did you complete the anonymous [restaurant survey on Qualtrics](https://ubc.ca1.qualtrics.com/jfe/form/SV_73VuZiuwM1eDVrw)?\n- [ ] Are you almost finished or at least started with homework 1?\n\n",
    "supporting": [
      "slides-01-intro_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}